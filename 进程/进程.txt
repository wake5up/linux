1.冯诺依曼体系结构--现在计算机硬件体系结构
 计算机五大硬件单元：输入设备：键盘  
                                     输出设备：显示器
                                     存储器：内存外存
                                     运算器：CPU
                                     控制器
                                     所有设备都是围绕存储器工作的

                                       硬件结构决定了软件行为:数据流向
操作系统：一个软件，安装在计算机硬件上
                 目的：为了让计算机更加好用
                  功能：合理统筹管理计算机上面的软硬件资源
                  管理：先描述，再组织

库函数与系统调用接口的关系：库函数封装了系统调用接口，是上下级的调用关系
管理：先描述，再组织

硬件驱动：采集硬件信息
shell：分装系统调用接口工具

2.进程：
   进程是什么？  进程是一个运行中的程序，linux是一个多任务操作系统，表示有大量的程序需要被CPU调度运行，这时候CPU使用了分时技术，分别轮流处理每一个程序，在进程程序切换调度时，需要记录运行信息，因此操作系统在调度进程在CPU上运行时，使用pcb对运行中的程序进行描述，通过调度pcb完成对进程的调度，因此进程是pcb----先描述后组织（使用pcb描述进程，使用双向链表将pcb串起来进行管理）pcb-----task_struct(linux中)

   标识符PID：进程ID（快速找到进程）

3.进程查看：
   ps -ef  所有进程信息(包括用户)     ps aux   更加详细信息   ps -ef/aux |grep loop(程序名)  grep过滤
   ls /proc/ 当前操作系统中正在运行的程序信息
   源程序中pid_t  pid=getpid();   pid中获取调用进程的pid
4.进程创建：创建一个子进程
   fork()-- 通过复制调用进程（父进程）创建一个新的进程（子进程）
   复制：复制了父进程的pcd（意味着和父进程拥有一样的内存指针，程序计数器，上下文数据）： 
   和父进程运行相同的代码，一样的运行位置，处理一样的数据
   父子进程代码共享：数据独有
       如何分辨父子进程：返回值
              父进程：返回子进程的pid，pid>0
              子进程：返回0
              失败：返回-1

 创建子进程的意义：分摊压力，cpu资源足够的情况父子进程同时处理数据，效率高。
                                  希望子进程完成其他的任务
gval=100;
pid_t pid=fork();
if(pid<0)
{
    printf("fork error");
    return -1;
}
else if(pid==0)
{
    gval=20;//子进程单独运行这段代码，因为父进程返回值是子进程pid>0
    printf("---child line---pid:%d val:%d\n",getpid(),gval);
}
else
{
    sleep(1);
    printf("---parent line---pid:%d val:%d\n",getpid(),gval);
}


5.进程状态：就绪，运行，阻塞
        linux进场状态：
           运行态（R）：
           可中断睡眠态（S）：
           不可中断睡眠态（D）：
           停止态（T）；
           僵死态（Z）：
           死亡态（X）：
           追踪态（t）：
    kill+pid  杀死进程    kill -9 pid  强杀停止态
   僵尸进程：处于僵死态的进程--进程退出了但是资源没有完全释放（没有完全退出）
   如何产生：子进程先于父进程退出，将自己的退出原因保存在cpd中，操作系统检测到子进程退
                     出，因为父进程有可能关注退出原因，所有不敢随意释放所有资源，通知父进程子进程
                      的退出，但是这时候父进程可能正在运行，没有关注到这个通知，导致子进程退出了，
                     但是资源一直没有完全释放，处于僵死状态，成为僵尸进程
         危害：资源泄露，一个用户能够创建的进程是有限的，可能导致新进程创建失败
         处理：干掉父进程
         如何避免：进程等待
 孤儿进程：父进程先于子进程退出，子进程成为孤儿进程，u；运行在后台，父进程成为1号进程
 守护进程（精灵进程）：特殊的孤儿进程（脱离终端（后台），脱离登陆会话的孤儿进程）

6.进程优先级：通过一个评级来决定一个进程的CPU资源有限分配权
     意义：为了让计算机运行的更加合理（因为进程的性质各有不同---批处理/交互式）
     查看：ps -l   PRI       NI
     修改：优先级无法直接修改，但是可以通过修改NI 的值，来调整PRI的值
                         PRI=PRI+NI            renice -n ni_val -p pid       nice值的范围（-20~19）
                                                         nice -n ni_val ./main  运行时修改优先级
        优先级调整更多的是针对CPU密集型程序（对CPU资源要求比较高）
        磁盘密集型程序因为本身对CPU资源要求就不是很高，因此大多数情况下，没必要调整
  竞争性：               独立性：               并行（一次处理多个）                并发（一个一个处理）
7.环境变量：保存有设置操作系统运行环境参数的变量
变量是什么？？？内存解释
  查看环境变量：env     set（环境变量+普通变量）     echo $PATH  查看环境变量PATH内容
  设置环境变量：export + 变量名
  删除环境变量：unset+ 变量名
  常见环境变量：HOME  SHELL  PATH(操作符的默认查找路径)
  环境变量在代码中的操作以及特性
//
#include<stdio.h>
#include<unistd.h>
#include<stdlib.h>
int main(int argc,char *argv[],char* env[])
{
    //第一种方法
    int i;
    for(i=0;env[i]!=NULL;i++)
    {
        printf("env[%d]=[%s]\n",i,env[i]);
   }
   //第二种方法
   char **environ;//全局变量
   for(i=0;environ[i]!=NULL;i++)
    {
        printf("env[%d]=[%s]\n",i,environ[i]);
   }
   //第三中方法
   //char* getenv(const char* name);//通过环境变量名称获取环境变量的值
   char* ptr=getenv("PATH");
   printf("ptr:[%s]\n",ptr);
    return 0;
}



不同终端有着不同的shell（继承特性）
在其中一个终端中设置环境变量，在另一个终端中eche不出来。
shell（解释程序）怎么工作的？？
（获取一个字符串，对字符串进行解析，解析之后创建子进程，让子进程完成任务）
在linux系统下，操作系统先运行bash（获取标准输入）程序，当用户输入ls字符时，shell会创建一个子进程完成寻找ls的操作，从而完成用户所需操作（./main也是这样工作的）
    原因：规避风险，子进程不怕崩溃，而shell若是崩溃了，终端将无法运转