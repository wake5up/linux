yum：软件包管理工具
          软件包
          linux下软件安装方式： 
                         源码安装：手动安装一个个依赖第三方库
                         工具安装：自动解决依赖关系库的安装
         查看能够安装哪些软件包：yum list |grep package_name
         查看已经安装了哪些软件包：yum list installed | grep package_name
         安装软件包  yum install package_name(vim--文本编辑工具   gcc--程序编译工具  gdb--程序调试工具  git--版本控制工具   lrzsz--文件传输工具) 
         移除已安装的软件包  yum remove package_name

lrzsz的使用：
     rz 从主机传输文件到服务器/虚拟机
     sz filename 从虚拟机/服务器传输文件到主机

vim编译器：
     vim共有12种模式，最常用的是三种：
     普通模式：完成编辑一个文件最常见的操作（复制，粘贴，剪切，撤销，恢复撤销）
     插入模式：插入数据
     底行模式：保存/退出    vim设置

   vim filename-->默认进入普通模式
   模式切换：  
   普通---》插入  i   从光标所在位置插入    
                          I 光标移动到行首，开始插入
                          a光标后一个字符，开始插入
                          A光标移动到行尾，开始插入
                          o向光标所在行下方添加新行，开始插入
                          O向光标所在行上方添加新行，开始插入 
    插入---》普通 ESC 
    普通---》底行  ：    
    底行---》普通  ESC
 
普通模式下的操作：
   光标移动：h j k l  上下左右
                     w  b    安单词右/左移动
                     ctrl+f/b   向下/上翻页  
                     gg/G   文档首行/尾行
   复制   yy复制光标所在行
             nyy  从光标所在行开始向下复制n行
   粘贴   小写p  向光标所在行下方粘贴新行
             大写P  向光标所在行上方粘贴新行
   剪切/删除    x  删除光标所在的字符
                       dw  删除光标所在单词
                       dd  删除光标所在行
                       ndd  从光标所在行开始向下删除n行
   撤销   u
   恢复撤销  ctrl+r 

底行模式的操作：
  ：q  退出
  ：w 保存
  ：wq保存退出
  ：q！ 退出不保存（强制退出）
  ：！command  临时执行command命令
  /string  字符串匹配（向下查找）
  ？string  字符串匹配（向上查找）

gcc：编译器
将高级语言编译成为机器可识别的指令代码
编译过程：
预处理：去掉注释，展开所有代码
编译：语义语法纠错，将代码解释成为汇编代码‘
汇编：将汇编代码解释成为机器指令代码
链接：连接代码库以及所有的目标文件，生成可执行程序
库文件：大佬们实现一些常用的功能接口，为了防止每次编译耗费时间，因此将这些接口代码进行编译汇编，并且将汇编完成的代码存储到了一个文件中，这个文件就叫库文件
这时候如果大家想用库函数，这时候就需要包含头文件因为头文件中声明这个函数的存在，这时候编译器在头文件中检测到这个声明，就知道有这个函数的实现，就不会报错了
最终链接生成可执行程序的时候，因为要具体让CPU处理指令，因此就必须将这些接口的具体实现拿过来

gcc的连接方式：
静态链接：链接静态库，链接时，将库中代码写入到可执行程序中；优点：运行时不依赖库的存在，但是占用资源较多，并且如果大量的程序静态链接，会在内存中造成代码冗余
动态链接：链接动态库，链接时，只记录接口的位置符号信息，并不拷贝代码；优点：占用资源少，在内存中大量程序可以共享使用（共享库），缺点：运行时需要依赖库的存在（运行时库）

gcc编译器的默认链接方式：动态链接

gdb调试器
    调试一个程序的前提是什么？
           生成debug版本程序，向程序中添加调试符号信息
           linux下gcc默认生成的程序是release版本程序需要，需要加上-g选项，生成debug版本程序
           gcc -g main.c -o main
           
            gdb加载程序
                 gdb  ./main
                 gdb ->file ./main
             获取运行参数，并运行程序
               
   最常见的调试操作有哪些？
       打印内容：
       单步调试：
             start  开始逐步调试
             l（list）查看调试行附近代码   l file:line
             n(next)  下一步：不进入函数
             s（step）下一步：进入函数
             until 直接运行到指定行   until  file:line
         打断点：
             b（break）：打断点    b file：line       b  function name
             i（info）：查看调试信息     i  b   查看断点信息
             d（delete）： 删除断点      d  b_id(断点编号)
             watch： 变量监控   watch  var_name
             c（continue）：继续开始运行
         查看调用栈信息：
              bt    快速定位程序崩溃位置